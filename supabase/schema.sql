-- Use this as a starting point; refine policies before production
create table if not exists public.profiles(
  id uuid primary key,
  role text check (role in ('tenant','landlord','admin')) default 'tenant',
  full_name text, phone text, verified boolean default false,
  created_at timestamptz default now()
);

create table if not exists public.properties(
  id uuid primary key default gen_random_uuid(),
  landlord_id uuid references public.profiles(id) on delete cascade,
  title text not null, rent integer not null,
  address text not null, city text, postal_code text,
  type text, furnished boolean default false,
  description text, images jsonb default '[]'::jsonb,
  available boolean default true, created_at timestamptz default now()
);

create table if not exists public.favorites(
  user_id uuid references public.profiles(id) on delete cascade,
  property_id uuid references public.properties(id) on delete cascade,
  primary key(user_id, property_id)
);

create table if not exists public.messages(
  id bigint generated by default as identity primary key,
  property_id uuid references public.properties(id) on delete cascade,
  sender_id uuid references public.profiles(id) on delete cascade,
  recipient_id uuid references public.profiles(id) on delete cascade,
  body text not null, created_at timestamptz default now()
);
